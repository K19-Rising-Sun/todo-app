// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"fmt"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    username, category, title, description, is_done
) VALUES (
    ?, ?, ?, ?, ?
)
RETURNING id, username, category, title, description, is_done
`

type CreateTodoParams struct {
	Username    string `json:"username"`
	Category    string `json:"category"`
	Title       string `json:"title"`
	Description string `json:"description"`
	IsDone      int64  `json:"is_done"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.Username,
		arg.Category,
		arg.Title,
		arg.Description,
		arg.IsDone,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Category,
		&i.Title,
		&i.Description,
		&i.IsDone,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password
) VALUES (
    ?, ?
)
RETURNING username, password
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(&i.Username, &i.Password)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE username = ? AND id = ?
`

type DeleteTodoParams struct {
	Username string `json:"username"`
	ID       int64  `json:"id"`
}

func (q *Queries) DeleteTodo(ctx context.Context, arg DeleteTodoParams) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, arg.Username, arg.ID)
	return err
}

const getTodos = `-- name: GetTodos :many
SELECT id, username, category, title, description, is_done FROM todos
WHERE username = ?
`

func (q *Queries) GetTodos(ctx context.Context, username string) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Category,
			&i.Title,
			&i.Description,
			&i.IsDone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT username, password FROM users
WHERE username = ?
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.Username, &i.Password)
	return i, err
}

const searchTodos = `-- name: SearchTodos :many
SELECT id, username, category, title, description, is_done FROM todos
WHERE username = ? AND id IN(
    SELECT rowid FROM todo_search
    WHERE todo_search = '' || ?2
)
`

type SearchTodosParams struct {
	Username string         `json:"username"`
	Query    sql.NullString `json:"query"`
}

func (q *Queries) SearchTodos(ctx context.Context, arg SearchTodosParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, searchTodos, arg.Username, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Category,
			&i.Title,
			&i.Description,
			&i.IsDone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET
 username = ?1,
 category = coalesce(?2, category),
 title = coalesce(?3, title),
 description = coalesce(?4, description),
 is_done = coalesce(?5, is_done)
WHERE id = ?6
RETURNING id, username, category, title, description, is_done
`

type UpdateTodoParams struct {
	Username    sql.NullString `json:"username"`
	Category    sql.NullString `json:"category"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	IsDone      sql.NullInt64  `json:"is_done"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
    fmt.Println("arg: ", arg)
	row := q.db.QueryRowContext(ctx, updateTodo,
		arg.Username,
		arg.Category,
		arg.Title,
		arg.Description,
		arg.IsDone,
		arg.ID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Category,
		&i.Title,
		&i.Description,
		&i.IsDone,
	)
	return i, err
}
